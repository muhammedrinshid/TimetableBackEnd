# Generated by Django 4.2.13 on 2024-11-27 11:24

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                (
                    "school_name",
                    models.CharField(default="Unnamed School", max_length=255),
                ),
                ("school_id", models.CharField(max_length=50, unique=True)),
                ("address", models.TextField(blank=True, null=True)),
                ("city", models.CharField(blank=True, max_length=100, null=True)),
                ("state", models.CharField(blank=True, max_length=100, null=True)),
                ("country", models.CharField(blank=True, max_length=100, null=True)),
                ("postal_code", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "profile_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="school_profiles/"
                    ),
                ),
                (
                    "working_days",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("MON", "Monday"),
                                ("TUE", "Tuesday"),
                                ("WED", "Wednesday"),
                                ("THU", "Thursday"),
                                ("FRI", "Friday"),
                                ("SAT", "Saturday"),
                                ("SUN", "Sunday"),
                            ],
                            max_length=3,
                        ),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("teaching_slots", models.PositiveIntegerField(default=0)),
                (
                    "average_students_allowed_in_a_class",
                    models.PositiveIntegerField(blank=True, default=40, null=True),
                ),
                (
                    "period_name",
                    models.CharField(blank=True, default="session", null=True),
                ),
                (
                    "role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ADMIN", "Administrator"),
                            ("TEACHER", "Teacher"),
                            ("STUDENT", "Student"),
                            ("PARENT", "Parent"),
                            ("STAFF", "Staff"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "School",
                "verbose_name_plural": "Schools",
            },
        ),
        migrations.CreateModel(
            name="Classroom",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "number_of_students",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                ("class_id", models.CharField(max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("division", models.CharField(max_length=10)),
            ],
            options={
                "verbose_name": "Classroom",
                "verbose_name_plural": "Classrooms",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ClassroomAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("capacity", models.IntegerField()),
                ("room_type", models.CharField(max_length=50)),
                ("occupied", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="ClassSection",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("division", models.CharField(max_length=10)),
                ("name", models.CharField(max_length=100)),
                (
                    "classroom",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="class_sectons",
                        to="base.classroom",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_sections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ClassSubject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("lessons_per_week", models.IntegerField(default=1)),
                ("multi_block_lessons", models.PositiveIntegerField(default=1)),
                ("elective_or_core", models.BooleanField(default=False)),
                ("prevent_first_half_period", models.BooleanField(default=False)),
                (
                    "class_room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_subjects",
                        to="base.classroom",
                    ),
                ),
            ],
            options={
                "verbose_name": "Class Subject",
                "verbose_name_plural": "Class Subjects",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="courses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DayClassroomAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("capacity", models.IntegerField()),
                ("room_type", models.CharField(max_length=50)),
                ("occupied", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="DayClassSection",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("division", models.CharField(max_length=10)),
                ("name", models.CharField(max_length=100)),
                (
                    "classroom",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="day_class_sectons",
                        to="base.classroom",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DayCourse",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="DayLesson",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "is_elective",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "elective_subject_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("elective_group_id", models.UUIDField(blank=True, null=True)),
                ("period", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="DayTimetable",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("teaching_slots", models.IntegerField()),
                ("auto_generated", models.BooleanField(default=True)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="day_timetables",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Grade",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("short_name", models.CharField(max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Grade",
                "verbose_name_plural": "Grades",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "is_elective",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "elective_subject_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("elective_group_id", models.UUIDField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Standard",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("short_name", models.CharField(max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "grade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="standards",
                        to="base.grade",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="standards",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Subject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subjects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Teacher",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("surname", models.CharField(blank=True, max_length=100, null=True)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("phone", models.CharField(blank=True, max_length=20, null=True)),
                ("min_lessons_per_week", models.PositiveIntegerField()),
                ("max_lessons_per_week", models.PositiveIntegerField()),
                ("teacher_id", models.CharField(max_length=20, null=True)),
                (
                    "profile_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="teacher_profiles/"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "grades",
                    models.ManyToManyField(related_name="teachers", to="base.grade"),
                ),
                (
                    "qualified_subjects",
                    models.ManyToManyField(
                        related_name="qualified_teachers", to="base.subject"
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teachers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Timetable",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("score", models.IntegerField(blank=True, null=True)),
                ("hard_score", models.IntegerField(blank=True, null=True)),
                ("soft_score", models.IntegerField(blank=True, null=True)),
                ("optimal", models.BooleanField(blank=True, default=False, null=True)),
                ("feasible", models.BooleanField(blank=True, default=False, null=True)),
                ("number_of_lessons", models.IntegerField(blank=True, null=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("is_default", models.BooleanField(default=False)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="timetables",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserConstraintSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("room_conflict", models.BooleanField(default=True, editable=False)),
                ("teacher_conflict", models.BooleanField(default=True, editable=False)),
                (
                    "student_group_conflict",
                    models.BooleanField(default=True, editable=False),
                ),
                ("elective_group_timeslot", models.BooleanField(default=True)),
                ("ensure_teacher_assigned", models.BooleanField(default=True)),
                ("ensure_timeslot_assigned", models.BooleanField(default=True)),
                ("consecutive_multi_block_lessons", models.BooleanField(default=False)),
                ("avoid_first_half_period", models.BooleanField(default=False)),
                ("tutor_free_period_constraint", models.BooleanField(default=True)),
                ("tutor_lesson_load", models.BooleanField(default=True)),
                ("daily_lesson_limit", models.BooleanField(default=True)),
                (
                    "prefer_consistent_teacher_for_subject",
                    models.BooleanField(default=True),
                ),
                ("prefer_subject_once_per_day", models.BooleanField(default=True)),
                (
                    "avoid_teacher_consecutive_periods_overlapping_class",
                    models.BooleanField(default=True),
                ),
                ("avoid_continuous_subjects", models.BooleanField(default=True)),
                ("avoid_continuous_teaching", models.BooleanField(default=True)),
                (
                    "avoid_consecutive_elective_lessons",
                    models.BooleanField(default=True),
                ),
                ("avoid_elective_in_first_period", models.BooleanField(default=True)),
                (
                    "assign_class_teacher_at_first_period",
                    models.BooleanField(default=False),
                ),
                (
                    "same_teacher_first_period_constraint",
                    models.BooleanField(default=False),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="constraint_settings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserAcademicSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "average_students_allowed",
                    models.PositiveIntegerField(blank=True, default=40, null=True),
                ),
                (
                    "period_name",
                    models.CharField(
                        blank=True, default="session", max_length=50, null=True
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="academic_schedule",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Tutor",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tutors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tutors",
                        to="base.teacher",
                    ),
                ),
                (
                    "timetable",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tutors",
                        to="base.timetable",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Timeslot",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("day_of_week", models.CharField(max_length=10)),
                ("period", models.IntegerField()),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="timeslots",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "timetable",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="timeslots",
                        to="base.timetable",
                    ),
                ),
            ],
            options={
                "unique_together": {("day_of_week", "period", "timetable")},
            },
        ),
        migrations.CreateModel(
            name="StandardLevel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="standard_levels",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "standard",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="class_sectons",
                        to="base.standard",
                    ),
                ),
                (
                    "timetable",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="standard_levels",
                        to="base.timetable",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=100, null=True)),
                ("room_number", models.CharField(max_length=20)),
                ("capacity", models.PositiveIntegerField(blank=True, null=True)),
                ("occupied", models.BooleanField(default=False)),
                (
                    "room_type",
                    models.CharField(
                        choices=[
                            ("CLASSROOM", "Classroom"),
                            ("OFFICE", "Office"),
                            ("COMPUTER_LAB", "Computer Lab"),
                            ("LECTURE_HALL", "Lecture Hall"),
                            ("CONFERENCE_ROOM", "Conference Room"),
                            ("LABORATORY", "Laboratory"),
                            ("STUDY_AREA", "Study Area"),
                            ("OTHER", "Other"),
                        ],
                        default="CLASSROOM",
                        max_length=20,
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LessonClassSection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("number_of_students", models.IntegerField()),
                (
                    "class_section",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.classsection",
                    ),
                ),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.lesson"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="lesson",
            name="allotted_teacher",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="allotted_lessons",
                to="base.tutor",
            ),
        ),
        migrations.AddField(
            model_name="lesson",
            name="class_sections",
            field=models.ManyToManyField(
                related_name="lessons",
                through="base.LessonClassSection",
                to="base.classsection",
            ),
        ),
        migrations.AddField(
            model_name="lesson",
            name="classroom_assignment",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="base.classroomassignment",
            ),
        ),
        migrations.AddField(
            model_name="lesson",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="base.course"
            ),
        ),
        migrations.AddField(
            model_name="lesson",
            name="school",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="lessons",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="lesson",
            name="timeslot",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="base.timeslot"
            ),
        ),
        migrations.AddField(
            model_name="lesson",
            name="timetable",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="lessons",
                to="base.timetable",
            ),
        ),
        migrations.CreateModel(
            name="ElectiveGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "preferred_rooms",
                    models.ManyToManyField(
                        related_name="electvie_grops", to="base.room"
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="electivegroups",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "standard",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="electives_groups",
                        to="base.standard",
                    ),
                ),
            ],
            options={
                "verbose_name": "Elective Group",
                "verbose_name_plural": "Elective Groups",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DayTutor",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "day_timetable",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="day_tutors",
                        to="base.daytimetable",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="day_tutors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="day_tutors",
                        to="base.teacher",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DayTimetableDate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("date", models.DateField()),
                (
                    "day_of_week",
                    models.CharField(
                        choices=[
                            ("MON", "Monday"),
                            ("TUE", "Tuesday"),
                            ("WED", "Wednesday"),
                            ("THU", "Thursday"),
                            ("FRI", "Friday"),
                            ("SAT", "Saturday"),
                            ("SUN", "Sunday"),
                        ],
                        max_length=3,
                    ),
                ),
                (
                    "day_timetable",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="timetable_dates",
                        to="base.daytimetable",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="timetable_dates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="daytimetable",
            name="timetable",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="day_timetables",
                to="base.timetable",
            ),
        ),
        migrations.CreateModel(
            name="DayStandardLevel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                (
                    "day_timetable",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="day_standard_levels",
                        to="base.daytimetable",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="day_standard_levels",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "standard",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="day_standard_levels",
                        to="base.standard",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DaySchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "day",
                    models.CharField(
                        choices=[
                            ("MON", "Monday"),
                            ("TUE", "Tuesday"),
                            ("WED", "Wednesday"),
                            ("THU", "Thursday"),
                            ("FRI", "Friday"),
                            ("SAT", "Saturday"),
                            ("SUN", "Sunday"),
                        ],
                        max_length=3,
                    ),
                ),
                ("teaching_slots", models.PositiveIntegerField(default=1)),
                (
                    "schedule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="day_schedules",
                        to="base.useracademicschedule",
                    ),
                ),
            ],
            options={
                "ordering": ["day"],
            },
        ),
        migrations.CreateModel(
            name="DayLessonClassSection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("number_of_students", models.IntegerField()),
                (
                    "class_section",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="day_lesson_assignments",
                        to="base.dayclasssection",
                    ),
                ),
                (
                    "day_lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_section_assignments",
                        to="base.daylesson",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="daylesson",
            name="allotted_teacher",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="day_lessons",
                to="base.daytutor",
            ),
        ),
        migrations.AddField(
            model_name="daylesson",
            name="class_sections",
            field=models.ManyToManyField(
                related_name="day_lessons",
                through="base.DayLessonClassSection",
                to="base.dayclasssection",
            ),
        ),
        migrations.AddField(
            model_name="daylesson",
            name="classroom_assignment",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="base.dayclassroomassignment",
            ),
        ),
        migrations.AddField(
            model_name="daylesson",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="base.daycourse"
            ),
        ),
        migrations.AddField(
            model_name="daylesson",
            name="day_timetable",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="lessons",
                to="base.daytimetable",
            ),
        ),
        migrations.AddField(
            model_name="daylesson",
            name="school",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="day_lessons",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="daycourse",
            name="day_timetable",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="day_courses",
                to="base.daytimetable",
            ),
        ),
        migrations.AddField(
            model_name="daycourse",
            name="school",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="day_courses",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="daycourse",
            name="subject",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="day_courses",
                to="base.subject",
            ),
        ),
        migrations.AddField(
            model_name="dayclasssection",
            name="day_timetable",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="day_class_sections",
                to="base.daytimetable",
            ),
        ),
        migrations.AddField(
            model_name="dayclasssection",
            name="school",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="day_class_sections",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="dayclasssection",
            name="standard",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="base.daystandardlevel"
            ),
        ),
        migrations.AddField(
            model_name="dayclassroomassignment",
            name="room",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="day_classroom_asingments",
                to="base.room",
            ),
        ),
        migrations.AddField(
            model_name="dayclassroomassignment",
            name="school",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="day_classroom_assignments",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="dayclassroomassignment",
            name="timetable",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="day_classroom_assignments",
                to="base.daytimetable",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="subject",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="courses",
                to="base.subject",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="timetable",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="courses",
                to="base.timetable",
            ),
        ),
        migrations.CreateModel(
            name="ClassSubjectSubject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "number_of_students",
                    models.PositiveBigIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "assigned_teachers",
                    models.ManyToManyField(
                        related_name="class_subject_subjects", to="base.teacher"
                    ),
                ),
                (
                    "class_subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_subject_subjects",
                        to="base.classsubject",
                    ),
                ),
                (
                    "preferred_rooms",
                    models.ManyToManyField(
                        related_name="class_subject_subjects", to="base.room"
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_subject_subjects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.subject"
                    ),
                ),
            ],
            options={
                "verbose_name": "Class Subject Subject",
                "verbose_name_plural": "Class Subject Subjects",
                "ordering": ["class_subject", "subject"],
            },
        ),
        migrations.AddField(
            model_name="classsubject",
            name="elective_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="class_subjects",
                to="base.electivegroup",
            ),
        ),
        migrations.AddField(
            model_name="classsubject",
            name="school",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="class_subjects",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="classsubject",
            name="subjects",
            field=models.ManyToManyField(
                related_name="class_subjects",
                through="base.ClassSubjectSubject",
                to="base.subject",
            ),
        ),
        migrations.AddField(
            model_name="classsection",
            name="standard",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="base.standardlevel"
            ),
        ),
        migrations.AddField(
            model_name="classsection",
            name="timetable",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="class_sections",
                to="base.timetable",
            ),
        ),
        migrations.AddField(
            model_name="classroomassignment",
            name="room",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="classroom_asingments",
                to="base.room",
            ),
        ),
        migrations.AddField(
            model_name="classroomassignment",
            name="school",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="classroom_assignments",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="classroomassignment",
            name="timetable",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="classroom_assignments",
                to="base.timetable",
            ),
        ),
        migrations.AddField(
            model_name="classroom",
            name="class_teacher",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="classroom_teacher",
                to="base.teacher",
            ),
        ),
        migrations.AddField(
            model_name="classroom",
            name="room",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="classroom",
                to="base.room",
            ),
        ),
        migrations.AddField(
            model_name="classroom",
            name="school",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="classrooms",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="classroom",
            name="standard",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="classrooms",
                to="base.standard",
            ),
        ),
        migrations.CreateModel(
            name="TimeTableDaySchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "day",
                    models.CharField(
                        choices=[
                            ("MON", "Monday"),
                            ("TUE", "Tuesday"),
                            ("WED", "Wednesday"),
                            ("THU", "Thursday"),
                            ("FRI", "Friday"),
                            ("SAT", "Saturday"),
                            ("SUN", "Sunday"),
                        ],
                        max_length=3,
                    ),
                ),
                ("teaching_slots", models.PositiveIntegerField(default=1)),
                (
                    "table",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="day_schedules",
                        to="base.timetable",
                    ),
                ),
            ],
            options={
                "ordering": ["day"],
                "unique_together": {("table", "day")},
            },
        ),
        migrations.AddConstraint(
            model_name="teacher",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("min_lessons_per_week__lte", models.F("max_lessons_per_week"))
                ),
                name="min_lessons_lte_max_lessons",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="teacher",
            unique_together={("school", "teacher_id")},
        ),
        migrations.AlterUniqueTogether(
            name="room",
            unique_together={("room_number", "school")},
        ),
        migrations.AlterUniqueTogether(
            name="dayschedule",
            unique_together={("schedule", "day")},
        ),
        migrations.AddConstraint(
            model_name="classsubject",
            constraint=models.UniqueConstraint(
                condition=models.Q(("elective_or_core", True)),
                fields=("class_room", "elective_group"),
                name="unique_elective_group_per_classroom",
            ),
        ),
        migrations.AddConstraint(
            model_name="classroom",
            constraint=models.UniqueConstraint(
                fields=("school", "class_id"), name="unique_class_id_within_school"
            ),
        ),
        migrations.AddConstraint(
            model_name="classroom",
            constraint=models.UniqueConstraint(
                fields=("standard", "division"), name="unique_standard_division"
            ),
        ),
    ]
